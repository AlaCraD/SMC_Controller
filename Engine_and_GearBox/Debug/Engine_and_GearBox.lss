
Engine_and_GearBox.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001112  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000092f  00000000  00000000  00001472  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007f3  00000000  00000000  00001da1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a8  00000000  00000000  00002594  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004eb  00000000  00000000  0000273c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006a5  00000000  00000000  00002c27  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000032cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_17>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  88:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_Init>:
 *  Author: Michael
 */ 
#include "ADC_ATmega328P.h"

void ADC_Init(){
	ADCSRA = (1 << ADEN)|(1 << ADIE)|(0 << ADLAR)								// Включаем АЦП
  90:	8f e8       	ldi	r24, 0x8F	; 143
  92:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);							// устанавливаем предделитель преобразователя на 8
	ADMUX |= (1 << REFS1)|(1 << REFS0)					// выставляем опорное напряжение, как внешний ИОН      MUX3, MUX2, MUX1 и MUX0.
  96:	ec e7       	ldi	r30, 0x7C	; 124
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 6c       	ori	r24, 0xC0	; 192
  9e:	80 83       	st	Z, r24
  a0:	08 95       	ret

000000a2 <spi_write_read>:
	return 1;
}

uint8_t spi_write_read(uint8_t SPIdata)
{
	SPDR = SPIdata;
  a2:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); // Ожидаем получения данных
  a4:	0d b4       	in	r0, 0x2d	; 45
  a6:	07 fe       	sbrs	r0, 7
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <spi_write_read+0x2>
	return SPDR;
  aa:	8e b5       	in	r24, 0x2e	; 46
}
  ac:	08 95       	ret

000000ae <mcp_write>:

void mcp_write(uint8_t RegName, uint8_t Data)
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	d8 2f       	mov	r29, r24
  b4:	c6 2f       	mov	r28, r22

	MCP_CS_ON; // Выбрали микросхему сигналом CS
  b6:	2a 98       	cbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	8a e0       	ldi	r24, 0x0A	; 10
  ba:	8a 95       	dec	r24
  bc:	f1 f7       	brne	.-4      	; 0xba <mcp_write+0xc>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <mcp_write+0x12>
	_delay_us(2);
	spi_write_read(CAN_WRITE); // WRITE = 0b00000010 = 0x02
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	0e 94 51 00 	call	0xa2	; 0xa2 <spi_write_read>
	spi_write_read(RegName); // Адрес регистра
  c6:	8d 2f       	mov	r24, r29
  c8:	0e 94 51 00 	call	0xa2	; 0xa2 <spi_write_read>
	spi_write_read(Data);
  cc:	8c 2f       	mov	r24, r28
  ce:	0e 94 51 00 	call	0xa2	; 0xa2 <spi_write_read>
	MCP_CS_OFF;
  d2:	2a 9a       	sbi	0x05, 2	; 5
  d4:	8a e0       	ldi	r24, 0x0A	; 10
  d6:	8a 95       	dec	r24
  d8:	f1 f7       	brne	.-4      	; 0xd6 <mcp_write+0x28>
  da:	00 c0       	rjmp	.+0      	; 0xdc <mcp_write+0x2e>
	_delay_us(2);
}
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <mcp_read>:

uint8_t mcp_read(uint8_t RegName)
{
  e2:	cf 93       	push	r28
  e4:	c8 2f       	mov	r28, r24
	MCP_CS_ON; // Выбрали микросхему сигналом CS
  e6:	2a 98       	cbi	0x05, 2	; 5
  e8:	8a e0       	ldi	r24, 0x0A	; 10
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <mcp_read+0x8>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <mcp_read+0xe>
	_delay_us(2);
	spi_write_read(CAN_READ); // READ = 0b00000011 = 0x03
  f0:	83 e0       	ldi	r24, 0x03	; 3
  f2:	0e 94 51 00 	call	0xa2	; 0xa2 <spi_write_read>
	spi_write_read(RegName); // Адрес регистра
  f6:	8c 2f       	mov	r24, r28
  f8:	0e 94 51 00 	call	0xa2	; 0xa2 <spi_write_read>
	uint8_t buff = spi_write_read(0x00);
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 51 00 	call	0xa2	; 0xa2 <spi_write_read>
	MCP_CS_OFF;
 102:	2a 9a       	sbi	0x05, 2	; 5
 104:	9a e0       	ldi	r25, 0x0A	; 10
 106:	9a 95       	dec	r25
 108:	f1 f7       	brne	.-4      	; 0x106 <mcp_read+0x24>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <mcp_read+0x2a>
	_delay_us(2);
	return buff;
}
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <mcp_init>:



bool mcp_init(void)
{
	MCP_CS_OFF;
 110:	2a 9a       	sbi	0x05, 2	; 5
	SET_OUTPUT(P_CS);
 112:	22 9a       	sbi	0x04, 2	; 4
	
	SET_0(P_SCK);
 114:	2d 98       	cbi	0x05, 5	; 5
	SET_0(P_MOSI);
 116:	2b 98       	cbi	0x05, 3	; 5
	SET_0(P_MISO);
 118:	2c 98       	cbi	0x05, 4	; 5
	
	SET_OUTPUT(P_SCK);
 11a:	25 9a       	sbi	0x04, 5	; 4
	SET_OUTPUT(P_MOSI);
 11c:	23 9a       	sbi	0x04, 3	; 4
	SET_INPUT(P_MISO);
 11e:	24 98       	cbi	0x04, 4	; 4
	
	SET_INPUT(MCP_INT);
 120:	53 98       	cbi	0x0a, 3	; 10
	SET_1(MCP_INT);
 122:	5b 9a       	sbi	0x0b, 3	; 11
	
	// active SPI master interface
	SPCR = ((1<<SPE)|(1<<MSTR)|(1<<SPIE))&(~(1<<SPR0))&(~(1<<SPR1));
 124:	80 ed       	ldi	r24, 0xD0	; 208
 126:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0;
 128:	1d bc       	out	0x2d, r1	; 45
	
	// reset MCP2515 by software reset.
	// After this he is in configuration mode.
	MCP_CS_ON;
 12a:	2a 98       	cbi	0x05, 2	; 5
	spi_write_read(CAN_RESET);
 12c:	80 ec       	ldi	r24, 0xC0	; 192
 12e:	0e 94 51 00 	call	0xa2	; 0xa2 <spi_write_read>
	MCP_CS_OFF;
 132:	2a 9a       	sbi	0x05, 2	; 5
 134:	85 e3       	ldi	r24, 0x35	; 53
 136:	8a 95       	dec	r24
 138:	f1 f7       	brne	.-4      	; 0x136 <mcp_init+0x26>
 13a:	00 00       	nop
	
	// wait a little bit until the MCP2515 has restarted
	_delay_us(10);
	
	// load CNF1..3 Register
	MCP_CS_ON;
 13c:	2a 98       	cbi	0x05, 2	; 5
	spi_write_read(CAN_WRITE);
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	0e 94 51 00 	call	0xa2	; 0xa2 <spi_write_read>
	spi_write_read(CNF3);
 144:	88 e2       	ldi	r24, 0x28	; 40
 146:	0e 94 51 00 	call	0xa2	; 0xa2 <spi_write_read>
	
	spi_write_read(PHSEG2_3TQ);							//PS2 = (PHSEG2 + 1) = 3 TQ	
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	0e 94 51 00 	call	0xa2	; 0xa2 <spi_write_read>
	spi_write_read(BTLMODE_CNF3|PHSEG1_3TQ);			//PS1 = (PHSEG1 + 1) = 3 TQ  /  PropSeg = (PRSEG + 1) = 1 TQ
 150:	80 e9       	ldi	r24, 0x90	; 144
 152:	0e 94 51 00 	call	0xa2	; 0xa2 <spi_write_read>
	spi_write_read(BRP0);								//SWJ(0,0) = 1*TQ = 1 TQ     /  TQ = 2 x (BRP + 1)/FOS = 250ns
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 51 00 	call	0xa2	; 0xa2 <spi_write_read>
														//CAN speed = 1/(TQ*(SWJ+PS1+PS2+PropSeg)) = 500 kb/s
	// activate interrupts
	spi_write_read(RX1IE_ENABLED|RX0IE_ENABLED);
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	0e 94 51 00 	call	0xa2	; 0xa2 <spi_write_read>
	MCP_CS_OFF;
 162:	2a 9a       	sbi	0x05, 2	; 5
	
	// test if we could read back the value => is the chip accessible?
	if (mcp_read(CNF1) != BRP0) {
 164:	8a e2       	ldi	r24, 0x2A	; 42
 166:	0e 94 71 00 	call	0xe2	; 0xe2 <mcp_read>
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	b1 f4       	brne	.+44     	; 0x19a <mcp_init+0x8a>
		return 0;
	}
	
	// deactivate the RXnBF Pins (High Impedance State)
	mcp_write(BFPCTRL, 0);
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	8c e0       	ldi	r24, 0x0C	; 12
 172:	0e 94 57 00 	call	0xae	; 0xae <mcp_write>
	
	// set TXnRTS as inputs
	mcp_write(TXRTSCTRL, 0);
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	8d e0       	ldi	r24, 0x0D	; 13
 17a:	0e 94 57 00 	call	0xae	; 0xae <mcp_write>
	
	// turn off filters => receive any message
	mcp_write(RXB0CTRL, RXM0|RXM1);
 17e:	60 e6       	ldi	r22, 0x60	; 96
 180:	80 e6       	ldi	r24, 0x60	; 96
 182:	0e 94 57 00 	call	0xae	; 0xae <mcp_write>
	mcp_write(RXB1CTRL, RXM0|RXM1);
 186:	60 e6       	ldi	r22, 0x60	; 96
 188:	80 e7       	ldi	r24, 0x70	; 112
 18a:	0e 94 57 00 	call	0xae	; 0xae <mcp_write>
	
	// reset device to normal mode
	mcp_write(CANCTRL, 0);
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	8f e0       	ldi	r24, 0x0F	; 15
 192:	0e 94 57 00 	call	0xae	; 0xae <mcp_write>
	
	return 1;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	08 95       	ret
	spi_write_read(RX1IE_ENABLED|RX0IE_ENABLED);
	MCP_CS_OFF;
	
	// test if we could read back the value => is the chip accessible?
	if (mcp_read(CNF1) != BRP0) {
		return 0;
 19a:	80 e0       	ldi	r24, 0x00	; 0
	
	// reset device to normal mode
	mcp_write(CANCTRL, 0);
	
	return 1;
}
 19c:	08 95       	ret

0000019e <__vector_17>:

/* Функция инициализация АЦП */
void ADC_Init();

ISR(SPI_STC_vect)      // передача по SPI данных
{
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1

}
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <main>:

int main(void){

	uint16_t u;

	ADC_Init();
 1b2:	0e 94 48 00 	call	0x90	; 0x90 <ADC_Init>
	mcp_init();
 1b6:	0e 94 88 00 	call	0x110	; 0x110 <mcp_init>


	
	while(1){
		do{
			ADCSRA |= (1 << ADSC);    // Начинаем преобразование
 1ba:	ea e7       	ldi	r30, 0x7A	; 122
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
		}
		while ((ADCSRA & (1 << ADIF)) == 0); // пока не будет выставлено флага об окончании преобразования
		
		u = (ADCL|ADCH << 8); // Считываем  полученное значение
 1be:	c8 e7       	ldi	r28, 0x78	; 120
 1c0:	d0 e0       	ldi	r29, 0x00	; 0
 1c2:	a9 e7       	ldi	r26, 0x79	; 121
 1c4:	b0 e0       	ldi	r27, 0x00	; 0


	
	while(1){
		do{
			ADCSRA |= (1 << ADSC);    // Начинаем преобразование
 1c6:	80 81       	ld	r24, Z
 1c8:	80 64       	ori	r24, 0x40	; 64
 1ca:	80 83       	st	Z, r24
		}
		while ((ADCSRA & (1 << ADIF)) == 0); // пока не будет выставлено флага об окончании преобразования
 1cc:	80 81       	ld	r24, Z
 1ce:	84 ff       	sbrs	r24, 4
 1d0:	fa cf       	rjmp	.-12     	; 0x1c6 <main+0x14>
		
		u = (ADCL|ADCH << 8); // Считываем  полученное значение
 1d2:	88 81       	ld	r24, Y
 1d4:	2c 91       	ld	r18, X
		
		//Проверяем считанное значение
		if (u > 1000){
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	92 2b       	or	r25, r18
 1da:	89 3e       	cpi	r24, 0xE9	; 233
 1dc:	93 40       	sbci	r25, 0x03	; 3
 1de:	10 f0       	brcs	.+4      	; 0x1e4 <main+0x32>
			PORTB |= (1 << 5);
 1e0:	2d 9a       	sbi	0x05, 5	; 5
 1e2:	f1 cf       	rjmp	.-30     	; 0x1c6 <main+0x14>
		}
		else {
			PORTB &= ~(1 << 5);
 1e4:	2d 98       	cbi	0x05, 5	; 5
 1e6:	ef cf       	rjmp	.-34     	; 0x1c6 <main+0x14>

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>
